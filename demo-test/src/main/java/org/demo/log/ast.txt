https://www.jianshu.com/p/4bd5dc13f35a
https://www.jianshu.com/p/68fcbc154c2f
https://www.jianshu.com/p/0f1c7b3e907f

 在resources/META-INF/services/javax.annotation.processing.Processor 文件中进行服务注册
io.patamon.apt.processor.TestProcessor

package io.patamon.apt.lombok.processor;

import com.google.auto.service.AutoService;
import com.sun.source.util.Trees;
import com.sun.tools.javac.code.Flags;
import com.sun.tools.javac.model.JavacElements;
import com.sun.tools.javac.processing.JavacProcessingEnvironment;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.TreeMaker;
import com.sun.tools.javac.util.Context;
import com.sun.tools.javac.util.List;
import com.sun.tools.javac.util.Names;
import io.patamon.apt.lombok.annotation.Setter;
import io.patamon.apt.lombok.annotation.ShowMethod;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import java.util.ArrayList;
import java.util.Set;

@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes({"io.patamon.apt.lombok.annotation.*"})
public class LombokProcessor extends AbstractProcessor {

    /**
     * 语法树
     */
    private Trees trees;

    /**
     * 树节点创建工具类
     */
    private TreeMaker treeMaker;

    /**
     * 命名工具类
     */
    private Names names;

    private Messager messager;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        this.messager = processingEnv.getMessager();
        this.trees = Trees.instance(processingEnv);
        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();
        this.treeMaker = TreeMaker.instance(context);
        this.names = Names.instance(context);
    }

   /* @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        if (!roundEnv.processingOver()) {
            for (Element element : roundEnv.getRootElements()) {
                if (element.getKind().isClass()) {
                    // 获取语法树
                    JCTree tree = (JCTree) trees.getTree(element);
                    // 使用TreeTranslator遍历
                    tree.accept(new LombokTreeTranslator(treeMaker, names,processingEnv));
                }
            }
        }
        return false;
    }*/

//    @Override
//    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
//        final Context context = ((JavacProcessingEnvironment) processingEnv).getContext();
//        final JavacElements elementUtils = (JavacElements) processingEnv.getElementUtils();
//        final TreeMaker treeMaker = TreeMaker.instance(context);
//        Set<? extends Element> elements = roundEnv.getRootElements();
//        for (Element element : roundEnv.getElementsAnnotatedWith(Setter.class)) {
//            JCTree.JCMethodDecl jcMethodDecl = (JCTree.JCMethodDecl) elementUtils.getTree(element);
//            treeMaker.pos = jcMethodDecl.pos;
//            String name = jcMethodDecl.getName().toString();
//            jcMethodDecl.body = treeMaker.Block(0, List.of(
//                    treeMaker.Exec(
//                            treeMaker.Apply(
//                                    List.<JCTree.JCExpression>nil(),
//                                    treeMaker.Select(
//                                            treeMaker.Select(
//                                                    treeMaker.Ident(
//                                                            elementUtils.getName("System")
//                                                    ),
//                                                    elementUtils.getName("out")
//                                            ),
//                                            elementUtils.getName("println")
//                                    ),
//                                    List.<JCTree.JCExpression>of(
//                                            treeMaker.Literal(name)
//                                    )
//                            )
//                    ),
//                    jcMethodDecl.body
//            ));
//        }
//        return false;
//    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        final Context context = ((JavacProcessingEnvironment) processingEnv).getContext();
        final JavacElements elementUtils = (JavacElements) processingEnv.getElementUtils();
        final TreeMaker treeMaker = TreeMaker.instance(context);
        Set<? extends Element> elements = roundEnv.getRootElements();
        for (Element element : roundEnv.getElementsAnnotatedWith(ShowMethod.class)) {
            JCTree.JCClassDecl jcClassDecl = (JCTree.JCClassDecl) elementUtils.getTree(element);
            List<JCTree> list = jcClassDecl.defs;
            list.forEach(e->{
                if(e instanceof JCTree.JCMethodDecl){
                    t((JCTree.JCMethodDecl)e,elementUtils,treeMaker);
                }
            });
        }
        return false;
    }

    public  List<JCTree.JCStatement> addSysOutMethodLog(JCTree.JCMethodDecl jcMethodDecl,JavacElements elementUtils,TreeMaker treeMaker){
        List<JCTree.JCStatement> statements = jcMethodDecl.body.getStatements();
        List<JCTree.JCStatement> out = List.nil();
        String name = jcMethodDecl.getName().toString();
        treeMaker.pos = jcMethodDecl.pos;
        boolean isWrite = false;
        if (statements==null){
            out = out.append(sout(elementUtils,name));
        }else{
            for(JCTree.JCStatement statement:statements){
                if (!statement.toString().contains("super")&&!isWrite){
                    out = out.append(sout(elementUtils,name));
                    isWrite = true;
                }
                out = out.append(statement);
            }
        }
        if(!isWrite){
            out = out.append(sout(elementUtils,name));
        }
        return out;
    }

    public JCTree.JCExpressionStatement sout(JavacElements elementUtils, String str){
        return treeMaker.Exec(
                treeMaker.Apply(
                        List.<JCTree.JCExpression>nil(),
//                        treeMaker.Select(
                                treeMaker.Select(
                                        treeMaker.Ident(
                                                elementUtils.getName("SystemUtils")
                                        ),
                                        elementUtils.getName("sout")
                                ),
//                                elementUtils.getName("println")
//                        ),
                        List.<JCTree.JCExpression>of(
                                treeMaker.Literal(str)
                        )
                )
        );
    }

    public void t(JCTree.JCMethodDecl jcMethodDecl,JavacElements elementUtils,TreeMaker treeMaker){
        jcMethodDecl.body.stats = addSysOutMethodLog(jcMethodDecl,elementUtils,treeMaker);
    }


    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }
}

